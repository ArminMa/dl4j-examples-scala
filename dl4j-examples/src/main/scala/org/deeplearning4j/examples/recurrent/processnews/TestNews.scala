/**
  * This is a test program that uses word vector and trained network generated by PrepareWordVector.java and TrainNews.java
  * - Type or copy/paste news headline from news (indian news channel is preferred) and click on Check button
  * and see the predicted category right to the Check button
  * <p>
  * <b></b>KIT Solutions Pvt. Ltd. (www.kitsol.com)</b>
  *//**
  * This is a test program that uses word vector and trained network generated by PrepareWordVector.java and TrainNews.java
  * - Type or copy/paste news headline from news (indian news channel is preferred) and click on Check button
  * and see the predicted category right to the Check button
  * <p>
  * <b></b>KIT Solutions Pvt. Ltd. (www.kitsol.com)</b>
  */
package org.deeplearning4j.examples.recurrent.processnews

import org.datavec.api.util.ClassPathResource
import org.deeplearning4j.models.embeddings.loader.WordVectorSerializer
import org.deeplearning4j.models.embeddings.wordvectors.WordVectors
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork
import org.deeplearning4j.text.tokenization.tokenizer.preprocessor.CommonPreprocessor
import org.deeplearning4j.text.tokenization.tokenizerfactory.{DefaultTokenizerFactory, TokenizerFactory}
import org.deeplearning4j.util.ModelSerializer
import org.nd4j.linalg.dataset.DataSet
import org.nd4j.linalg.factory.Nd4j
import org.nd4j.linalg.indexing.{INDArrayIndex, NDArrayIndex}

import java.awt.event.{ActionEvent, ActionListener}
import java.io.{BufferedReader, File, FileReader}
import java.util
import java.util.logging.{Level, Logger}
import javax.swing.{GroupLayout, JButton, JLabel, JScrollPane, JTextArea, UnsupportedLookAndFeelException}

import scala.collection.JavaConverters._


object TestNews {
  private var WORD_VECTORS_PATH: String = ""
  private var wordVectors: WordVectors = null
  private var tokenizerFactory: TokenizerFactory = null
  private val maxLength: Int = 8
  private var userDirectory: String = ""
  private var net: MultiLayerNetwork = null

  def main(args: Array[String]) {
    try {
      val found = javax.swing.UIManager.getInstalledLookAndFeels.find { info =>
        "Nimbus" == info.getName
      }
      javax.swing.UIManager.setLookAndFeel(found.get.getClassName)
    } catch {
      case ex: ClassNotFoundException =>
        Logger.getLogger(classOf[TestNews].getName).log(Level.SEVERE, null, ex)
      case ex: InstantiationException =>
        Logger.getLogger(classOf[TestNews].getName).log(Level.SEVERE, null, ex)
      case ex: IllegalAccessException =>
        Logger.getLogger(classOf[TestNews].getName).log(Level.SEVERE, null, ex)
      case ex: UnsupportedLookAndFeelException =>
        Logger.getLogger(classOf[TestNews].getName).log(Level.SEVERE, null, ex)
    }
    val test = new TestNews
    test.setVisible(true)

    try {
      userDirectory = new ClassPathResource("NewsData").getFile.getAbsolutePath + File.separator
      WORD_VECTORS_PATH = userDirectory + "NewsWordVector.txt"
      tokenizerFactory = new DefaultTokenizerFactory
      tokenizerFactory.setTokenPreProcessor(new CommonPreprocessor)
      net = ModelSerializer.restoreMultiLayerNetwork(userDirectory + "NewsModel.net")
      wordVectors = WordVectorSerializer.loadTxtVectors(new File(WORD_VECTORS_PATH))
    } catch { case e: Exception => () }
  }

  private def prepareTestData(i_news: String): DataSet = {
    val news = new util.ArrayList[String](1)
    val category = new Array[Int](1)
    val currCategory = 0
    news.add(i_news)

    val allTokens = new util.ArrayList[util.List[String]](news.size)
    var maxLength = 0
    for (s <- news.asScala) {
      val tokens = tokenizerFactory.create(s).getTokens
      val tokensFiltered = new util.ArrayList[String]
      for (t <- tokens.asScala) {
        if (wordVectors.hasWord(t)) tokensFiltered.add(t)
      }
      allTokens.add(tokensFiltered)
      maxLength = Math.max(maxLength, tokensFiltered.size)
    }

    val features = Nd4j.create(news.size, wordVectors.lookupTable.layerSize, maxLength)
    val labels = Nd4j.create(news.size, 4, maxLength)
    //labels: Crime, Politics, Bollywood, Business&Development
    val featuresMask = Nd4j.zeros(news.size, maxLength)
    val labelsMask = Nd4j.zeros(news.size, maxLength)
    val temp = new Array[Int](2)
    for (i <- news.asScala.indices) {
      val tokens = allTokens.get(i)
      temp(0) = i
      for (j <- 0 until math.min(tokens.size, maxLength)) {
        val token = tokens.get(j)
        val vector = wordVectors.getWordVectorMatrix(token)
        features.put(Array[INDArrayIndex](NDArrayIndex.point(i),
            NDArrayIndex.all,
            NDArrayIndex.point(j)),
          vector)

        temp(1) = j
        featuresMask.putScalar(temp, 1.0)
      }
      val idx = category(i)
      val lastIdx = Math.min(tokens.size, maxLength)
      labels.putScalar(Array[Int](i, idx, lastIdx - 1), 1.0)
      labelsMask.putScalar(Array[Int](i, lastIdx - 1), 1.0)
    }
    new DataSet(features, labels, featuresMask, labelsMask)
  }

}


class TestNews() extends javax.swing.JFrame {

  initComponents()
  // Variables declaration - do not modify
  private var jButton1: JButton = null
  private var jLabel1: JLabel = null
  private var jLabel2: JLabel = null
  private var jLabel3: JLabel = null
  private var jScrollPane1: JScrollPane = null
  private var jTextArea1: JTextArea = null

  /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
  @SuppressWarnings(Array("unchecked")) private // <editor-fold defaultstate="collapsed" desc="Generated Code">
  def initComponents() {
    this.setTitle("Predict News Category - KITS")
    jLabel1 = new JLabel
    jScrollPane1 = new JScrollPane
    jTextArea1 = new JTextArea
    jButton1 = new JButton
    jLabel2 = new JLabel
    jLabel3 = new JLabel

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE)

    jLabel1.setText("Type News Here")

    jTextArea1.setColumns(20)
    jTextArea1.setRows(5)
    jScrollPane1.setViewportView(jTextArea1)

    jButton1.setText("Check")
    jButton1.addActionListener(new ActionListener() {
      def actionPerformed(evt: ActionEvent) {
        jButton1ActionPerformed(evt)
      }
    })

    jLabel2.setText("Category")

    val layout = new GroupLayout(getContentPane)
    getContentPane.setLayout(layout)
    layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup.addContainerGap.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, java.lang.Short.MAX_VALUE).addGroup(layout.createSequentialGroup.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel1).addComponent(jButton1)).addGap(0, 0, java.lang.Short.MAX_VALUE)).addGroup(layout.createSequentialGroup.addComponent(jLabel2).addGap(18, 18, 18).addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, java.lang.Short.MAX_VALUE))).addContainerGap()))
    layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup.addContainerGap.addComponent(jLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jButton1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel3).addComponent(jLabel2)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, java.lang.Short.MAX_VALUE)))
    pack()
  }

  // </editor-fold>
  private def jButton1ActionPerformed(evt: ActionEvent) {
    val testNews = TestNews.prepareTestData(jTextArea1.getText)
    val fet = testNews.getFeatureMatrix
    val predicted = TestNews.net.output(fet, false)
    val arrsiz = predicted.shape
    val crimeTotal = 0.0
    val politicsTotal = 0.0
    val bollywoodTotal = 0.0
    val developmentTotal = 0.0
    val DATA_PATH = TestNews.userDirectory + "LabelledNews"
    val categories = new File(DATA_PATH + File.separator + "categories.txt")
    var max = 0.0
    var pos = 0
    for (i <- 0 until arrsiz(1)) {
      if (max < predicted.getColumn(i).sumNumber.asInstanceOf[Double]) {
        max = predicted.getColumn(i).sumNumber.asInstanceOf[Double]
        pos = i
      }
    }
    try {
      val brCategories = new BufferedReader(new FileReader(categories))
      try {
        val labels = new util.ArrayList[String]
        var temp = brCategories.readLine

        while (temp != null) {
          labels.add(temp)
          temp = brCategories.readLine
        }
        brCategories.close()
        jLabel3.setText(labels.get(pos).split(",")(1))
      } catch {
        case e: Exception =>
          println("File Exception : " + e.getMessage)
      } finally {
        if (brCategories != null) brCategories.close()
      }
    }
  }
}
